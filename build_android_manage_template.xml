<?xml version="1.0" encoding="UTF-8"?>
<!-- This file is part of Polidea build system.
     It is included in order to enable efficient project building using ant.
     DO NOT MODIFY THIS FILE without consulting Jarek.
      -->
<project name="Android Manage template">
    <property file="project.properties" />
    <property file="local.properties" />
    <property file="server.properties" />
    <property file="build.properties" />
    <property file="default.properties" />
    <property name="bin.dir" location="bin" />
    <property name="ota.dir" location="ota" />
    <property name="apk.file" value="${project.apk.name}.apk" />
    <property name="jar.file" value="${jar.file.name}.jar" />
    <property name="file.version" value="version.txt" />
    <property name="template.url.prefix" value="http://dev.polidea.pl/ext/polidea_templates/android-template/polidea_android_template/" />

    <taskdef resource="net/sourceforge/ant4hg/taskdefs/antlib.xml" classpath="build-libs/ant4hg-V0.07.jar" />
    <taskdef resource="net/sf/antcontrib/antcontrib.properties" classpath="build-libs/ant-contrib-1.0b3.jar" />
    <!-- deployment -->

    <property environment="env" />

    <target name="pre-release" description="--> performs pre release operations (set versions)">
        <echo message="pre-release" />
        <fail unless="env.RELEASE_VERSION" message="Environment RELEASE_VERSION must be defined" />
        <property name="android.manifest.file" value="AndroidManifest.xml" />
        <propertyfile file="${file.version}">
            <entry key="current.version.code" type="int" operation="+" value="1" />
        </propertyfile>
        <replace token="\:" value=":" file="${file.version}" />
        <property file="${file.version}" prefix="app" />
        <echo message="${app.current.version.code}, ${env.RELEASE_VERSION}" />
        <replaceregexp file="${android.manifest.file}" match="android:versionCode.*=.*&quot;.*&quot;" replace="android:versionCode=&quot;${app.current.version.code}&quot;" byline="true" />
        <replaceregexp file="${android.manifest.file}" match="android:versionName.*=.*&quot;.*&quot;" replace="android:versionName=&quot;${env.RELEASE_VERSION}&quot;" byline="true" />
        <hg cmd="commit" dir="." message="Incrementing application version to ${env.RELEASE_VERSION} (${app.current.version.code})" user="${hg.user}" />
        <exec executable="hg">
            <!-- no tag support in ant4hg :( -->
            <arg value="tag" />
            <arg value="-u" />
            <arg value="${hg.user}" />
            <arg value="-f" />
            <arg value="Release_${env.RELEASE_VERSION}_${app.current.version.code}" />
        </exec>
        <hg cmd="push" dir="." />
    </target>

    <!-- Note! They cannot be set at the top of the file because pre-release
         increments version and only after that it loadse the version file
         therefore this task is only used in post-release -->
    <target name="setup.post-release.properties">
        <property file="${file.version}" prefix="app" />
        <fail unless="env.RELEASE_VERSION" message="Environment RELEASE_VERSION must be defined" />
        <property name="release.subdirectory.dir" location="${release.dir}/${external.directory.name}/" />
        <property name="full.version.name" value="${env.RELEASE_VERSION}_${app.current.version.code}" />
        <property name="versioned.dir" location="${release.subdirectory.dir}/${full.version.name}" />
        <property name="apk.file.name" value="${project.apk.name}-${full.version.name}.apk" />
        <property name="jar.full.file.name" value="${jar.file.name}-${full.version.name}.jar" />
        <property name="javadoc.file.name" value="${project.apk.name}-javadoc-${full.version.name}.zip" />
        <property name="sources.file.name" value="${project.apk.name}-src-${full.version.name}.zip" />
    </target>

    <target name="javadoc-zip" depends="setup.post-release.properties" description="Builds javadoc zip file">
        <echo message="javadoc-zip" />
        <zip destfile="bin/${javadoc.file.name}" update="false">
            <zipfileset dir="javadoc" />
        </zip>
    </target>

    <target name="sources-zip" depends="setup.post-release.properties" description="Builds sources zip file">
        <echo message="sources-zip" />
        <zip destfile="bin/${sources.file.name}" update="false">
            <zipfileset dir=".">
                <exclude name="**/.hg/**" />
                <exclude name="bin/**" />
                <exclude name="gen/**" />
                <exclude name="doc/**" />
                <exclude name="javadoc/**" />
                <exclude name="ota/**" />
                <exclude name="tmp*" />
                <exclude name="tmpcoverage/**" />
                <exclude name="outinstr/**" />
                <exclude name="subrepo/*/bin/**" />
                <exclude name="subrepo/*/gen/**" />
                <exclude name="subrepo/*/doc/**" />
                <exclude name="subrepo/*/javadoc/**" />
                <exclude name="subrepo/*/ota/**" />
                <exclude name="subrepo/*/tmp*" />
                <exclude name="subrepo/*/tmpcoverage/**" />
                <exclude name="subrepo/*/outinstr/**" />
            </zipfileset>
        </zip>
    </target>

    <target name="no-build-scripts-sources-zip" depends="setup.post-release.properties" description="Builds sources zip file">
        <echo message="sources-zip" />
        <zip destfile="bin/no-build-${sources.file.name}" update="false">
            <zipfileset dir=".">
                <exclude name="**/.hg/**" />
                <exclude name="bin/**" />
                <exclude name="gen/**" />
                <exclude name="doc/**" />
                <exclude name="analysis/**" />
                <exclude name="javadoc/**" />
                <exclude name="ota/**" />
                <exclude name="cert/**" />
                <exclude name="template/**" />
                <exclude name="build*.xml" />
                <exclude name="build.properties" />
                <exclude name="project.properties" />
                <exclude name="version.txt" />
                <exclude name="ChangeVersion.py" />
                <exclude name="tmp*" />
                <exclude name="Android-OTA/**" />
                <exclude name="tmpcoverage/**" />
                <exclude name="outinstr/**" />
                <exclude name="build-libs/**" />
                <exclude name="subrepo/*/bin/**" />
                <exclude name="subrepo/*/gen/**" />
                <exclude name="subrepo/*/doc/**" />
                <exclude name="subrepo/*/analysis/**" />
                <exclude name="subrepo/*/javadoc/**" />
                <exclude name="subrepo/*/ota/**" />
                <exclude name="subrepo/*/cert/**" />
                <exclude name="subrepo/*/template/**" />
                <exclude name="subrepo/*/build*.xml" />
                <exclude name="subrepo/*/build.properties" />
                <exclude name="subrepo/*/project.properties" />
                <exclude name="subrepo/*/version.txt" />
                <exclude name="subrepo/*/ChangeVersion.py" />
                <exclude name="subrepo/*/tmp*" />
                <exclude name="subrepo/*/Android-OTA/**" />
                <exclude name="subrepo/*/tmpcoverage/**" />
                <exclude name="subrepo/*/outinstr/**" />
                <exclude name="subrepo/*/build-libs/**" />
            </zipfileset>
        </zip>
    </target>


    <target name="download-qrcode">
        <urlencode property="url.encoded" value="${url}" />
        <get src="https://chart.googleapis.com/chart?cht=qr&amp;chs=256x256&amp;chl=${url.encoded}" dest="${qrcode.png.file}" />
    </target>

    <target name="release.montage">
        <fileset id="montage.fileset" dir = "." includes="**/*.jpg,**/*.jpeg,**/*.exif,**/*.png,**/*.bmp,**/*.gif,**/*.tif,**/*.tiff,**/*.raw,**/*.svg,**/*.webp,**/*.JPG,**/*.JPEG,**/*.EXIF,**/*.PNG,**/*.BMP,**/*.GIF,**/*.TIF,**/*.TIFF,**/*.RAW,**/*.SVG,**/*.WEBP" />
        <pathconvert pathsep="${line.separator}" property="images" refid="montage.fileset" />
        <echo file="gen/montage_images.txt">${images}</echo>
        <exec executable="montage" dir="gen">
            <arg value="@montage_images.txt" />
            <arg value="montage_images.jpg" />
        </exec>
        <tstamp>
        </tstamp>
        <exec executable="convert" dir="gen">
            <arg value="montage_images.jpg" />
            <arg value="-font" />
            <arg value="helvetica" />
            <arg value="-pointsize" />
            <arg value="36" />
            <arg value="-draw" />
            <arg value="gravity southwest fill black text 0,12 '${project.apk.name} Release_${env.RELEASE_VERSION}_${app.current.version.code} released ${DSTAMP} ${TSTAMP}' fill blue text 1,11" />
            <arg value="montage_converted_images.jpg" />
        </exec>
        <mkdir dir="${versioned.dir}" />
        <copy file="gen/montage_converted_images.jpg" tofile="${versioned.dir}/montage_converted_images.jpg" />
    </target>

    <target name="copy.jar.release" if="jar.file.name">
        <var name="release.full.url" value="${release.url}${versioned.dir}/${release.name}/${release.name}-${jar.full.file.name}" />
        <mkdir dir="${versioned.dir}/${release.name}" />
        <copy file="${ota.dir}/${release.name}/${release.name}-${jar.file}" tofile="${versioned.dir}/${release.name}/${release.name}-${jar.full.file.name}" />
        <echo message="Jar for ${release.name}: ${release.full.url}" />
        <echo file="${message.file}" append="true">
            <![CDATA[
   <li>Jar for ${release.name}: <a href="${release.full.url}">${release.full.url}</a></li>
]]></echo>
</target>

    <target name="copy.release" depends="copy.jar.release" description="Copies release to external dir (need to have release.name property defined)" if="release.name">
        <var name="release.full.url" value="${release.url}${versioned.dir}/${release.name}/${release.name}-${apk.file.name}" />
        <mkdir dir="${versioned.dir}/${release.name}" />
        <copy file="${ota.dir}/${release.name}/${release.name}-${apk.file}" tofile="${versioned.dir}/${release.name}/${release.name}-${apk.file.name}" />
        <echo message="Apk for ${release.name}: ${release.full.url}" />
        <echo file="${message.file}" append="true">
            <![CDATA[
   <li>Apk for ${release.name}: <a href="${release.full.url}">${release.full.url}</a></li>
]]></echo>
</target>


<target name="post-release" description="--> performs post release operations"
    depends="setup.post-release.properties, javadoc-zip, sources-zip, no-build-scripts-sources-zip, release.montage, preprocess.txt2tags.files">
    <echo message="post-release" />
    <mkdir dir="${release.subdirectory.dir}" />
    <mkdir dir="${versioned.dir}" />
    <property name="image.montage.url" value="${release.url}${versioned.dir}/montage_converted_images.jpg" />
    <echo message="Image montage at: ${image.montage.url}" />
    <property name="release.ota.url" value="${release.url}${versioned.dir}/index.html" />
    <property name="message.file" location="gen/message.html" />
    <delete file="${message.file}" failonerror="false" />
    <echo file="${message.file}" append="true">
        <![CDATA[<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"></head><body>
        Project <b>${project.apk.name}</b> released version ${env.RELEASE_VERSION}_${app.current.version.code}<p>
]]></echo>
    <echo message="OTA release: ${release.ota.url}" />
    <echo file="${message.file}" append="true">
        <![CDATA[<p>
The easiest way to install the application is Over-The-Air installation. You can open it directly on the device.<br>
OTA release is available here: <a href="${release.ota.url}">${release.ota.url}</a><br>
You can also install it by scanning the QR code attached to the mail.<p>
Separate .apk files are also available for download:
        ]]></echo>
    <echo file="${message.file}" append="true">
        <![CDATA[<ul>]]></echo>
    <dirset id="release.configurations.dirset" dir="release">
        <include name="*" />
    </dirset>
    <pathconvert pathsep="," property="release.configurations" refid="release.configurations.dirset">
        <mapper type="flatten" />
    </pathconvert>
    <antcall target="prepare.ota.release" inheritall="true">
    </antcall>
    <foreach list="${release.configurations}" target="copy.release" param="release.name" inheritall="true">
    </foreach>
    <echo file="${message.file}" append="true">
        <![CDATA[</ul>]]></echo>
    <antcall target="download-qrcode">
        <param name="url" value="${release.ota.url}" />
        <param name="qrcode.png.file" value="${versioned.dir}/qrcode.png" />
    </antcall>
    <echo message="Image montage at:" />
    <echo message="${release.url}${versioned.dir}/montage_converted_images.jpg" />
    <echo file="${message.file}" append="true">
        <![CDATA[<p>
You can see montage of <a href="${release.url}${versioned.dir}/montage_converted_images.jpg">all images used in the project</a>.<br>
The image is also attached to the mail.
        ]]></echo>
    <echo file="${message.file}" append="true">
        <![CDATA[<p><b>Description:</b><p>]]></echo>
    <concat destfile="${message.file}" append="true">
        <filelist dir="gen" files="DESCRIPTION.html"/>
    </concat>
    <echo file="${message.file}" append="true">
        <![CDATA[<p><b>Release notes:</b><p>]]></echo>
    <concat destfile="${message.file}" append="true">
        <filelist dir="gen" files="RELEASE_NOTES.html"/>
    </concat>
    <echo file="${message.file}" append="true"><![CDATA[
    <p>Have fun,<p>
            <i>Your Jenkins</i>
  <body>
  </html>]]></echo>
        <copy todir="gen" file="${versioned.dir}/qrcode.png"/>
        <mail from="${from.release.mail}" tolist="${to.release.mail}"
            subject="[Android] ${project.apk.name} released. Version ${env.RELEASE_VERSION}"
            encoding="auto"
            messagefile="${message.file}" messagemimetype="text/html">
            <attachments>
                <fileset dir="gen">
                    <include name="qrcode.png"/>
                    <include name="montage_converted_images.jpg"/>
                </fileset>
            </attachments>
        </mail>
    </target>

    <target name="preprocess.txt2tags.files">
        <exec executable="txt2tags" dir="${basedir}" failonerror="true">
            <arg value="-H"/>
            <arg value="--encoding=utf-8"/>
            <arg value="-o"/>
            <arg value="gen/RELEASE_NOTES.html"/>
            <arg value="-t"/>
            <arg value="html"/>
            <arg value="RELEASE_NOTES.txt"/>
        </exec>
        <exec executable="txt2tags" dir="${basedir}" failonerror="true">
            <arg value="-H"/>
            <arg value="--encoding=utf-8"/>
            <arg value="-o"/>
            <arg value="gen/DESCRIPTION.html"/>
            <arg value="-t"/>
            <arg value="html"/>
            <arg value="DESCRIPTION.txt"/>
        </exec>
    </target>

    <target name="append.url">
        <var name="release.full.url" value="${release.url}${versioned.dir}/${release.name}/${release.name}-${apk.file.name}" />
        <echo append="true" file="${ota.url.file}" message="${release.full.url},"/>
    </target>

    <target name="build.ota.urls">
        <property name="ota.url.file" location="gen/ota_url_file"/>
        <delete file="${ota.url.file}"/>
        <foreach list="${release.configurations}" param="release.name" inheritall="yes" target="append.url"/>
    </target>

    <target name="prepare.ota.release" depends="build.ota.urls">
        <loadfile property="url.list" srcfile="${ota.url.file}"/>
        <exec executable="python" dir="${basedir}" failonerror="true">
            <arg value="Android-OTA/CreateOTA.py" />
            <arg value="-n" />
            <arg value="${project.apk.name}" />
            <arg value="-d" />
            <arg value="${versioned.dir}" />
            <arg value="-u" />
            <arg value="${url.list}" />
            <arg value="-v" />
            <arg value="${full.version.name}" />
            <arg value="-r" />
            <arg value="${release.configurations}" />
            <arg value="-R" />
            <arg value="gen/RELEASE_NOTES.html" />
            <arg value="-D" />
            <arg value="gen/DESCRIPTION.html" />
        </exec>
    </target>


    <target name="build-zip-template" description="Builds zip file from the template">
        <property name="template.file" location="${basedir}/../polidea_android_template.zip">
        </property>
        <delete file="${template.file}">
        </delete>
        <zip destfile="${template.file}">
            <zipfileset dir="${basedir}">
            </zipfileset>
        </zip>
    </target>

    <target name="download.file">
        <echo message="Downloading file: ${file}" />
        <get src="${template.url.prefix}${file}" dest="${file}" verbose="on" />
    </target>

    <target name="check.if.file.exists">
        <echo message="Checking if exists: ${file}" />
        <available file="${file}" property="file.exists"/>
    </target>

    <target name="download.file.if.missing" depends="check.if.file.exists" unless="file.exists">
        <echo message="Downloading missing file: ${file}" />
        <get src="${template.url.prefix}${file}" dest="${file}" verbose="on" />
    </target>

    <target name="update.templates" description="Updates all templates">
        <antcall target="download.file">
            <param name="file" value="build_android_manage_template.xml" />
        </antcall>
        <antcall target="download.file.if.missing">
            <param name="file" value="build-libs/ant-contrib-1.0b3.jar" />
        </antcall>
        <ant antfile="build_android_manage_template.xml" target="update.all.files.from.template"></ant>
    </target>

    <target name="mkdir">
        <echo message="(Re)creating directory ${directory.to.create}"/>
        <mkdir dir="${directory.to.create}"/>
    </target>

    <target name="update.all.files.from.template">
        <mkdir dir="template"/>
        <antcall target="download.file">
            <param name="file" value="template/directories.txt" />
        </antcall>
        <antcall target="download.file">
            <param name="file" value="template/files.txt" />
        </antcall>
        <antcall target="download.file">
            <param name="file" value="template/files_if_missing.txt" />
        </antcall>
        <loadfile property="directories.to.create" srcfile="template/directories.txt"></loadfile>
        <loadfile property="files.to.download" srcfile="template/files.txt"></loadfile>
        <loadfile property="missing.files.to.download" srcfile="template/files_if_missing.txt"></loadfile>
        <foreach list="${directories.to.create}" delimiter="${line.separator}" param="directory.to.create" target="mkdir"/>
        <foreach list="${files.to.download}" delimiter="${line.separator}" param="file" target="download.file"/>
        <foreach list="${missing.files.to.download}" delimiter="${line.separator}" param="file" target="download.file.if.missing"/>
        <delete file="test/libs/polidea_test_runner_1.0.jar" failonerror="false"/>
    </target>
</project>
