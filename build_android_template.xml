<?xml version="1.0" encoding="UTF-8"?>
<!-- This file is part of Polidea build system.
     It is included in order to enable efficient project building using ant
     DO NOT MODIFY THIS FILE without consulting Jarek. -->
<project name="AndroidTemplate" default="build">
    <!-- make sure to add the following line to your build file after importing
         the template, so that it works fine in eclipse ant window as well:
    <import file="${sdk.dir}/tools/ant/main_rules.xml" />
    -->

    <property file="project.properties" />
    <property file="local.properties" />
    <property file="server.properties" />
    <property file="build.properties" />
    <property file="default.properties" />
    <property name="bin.dir" location="bin" />
    <property name="tests.dir" location="tests" />
    <property name="src.dir" location="src" />
    <property name="coverage.dir" location="coverage" />
    <property name="tmpcoverage.dir" location="tmpcoverage" />
    <property name="debug.apk.file" location="${bin.dir}/${project.apk.name}-debug.apk" />
    <property name="release.apk.file" location="${bin.dir}/${project.apk.name}-release.apk" />
    <property name="apk.file" location="${bin.dir}/${project.apk.name}.apk" />
    <taskdef resource="net/sf/antcontrib/antcontrib.properties" classpath="build-libs/ant-contrib-1.0b3.jar" />
    <taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask" classpath="build-libs/xmltask.jar" />

    <path id="android.antlibs">
        <pathelement path="${sdk.dir}/tools/lib/anttasks.jar" />
        <pathelement path="${sdk.dir}/tools/lib/sdklib.jar" />
        <pathelement path="${sdk.dir}/tools/lib/androidprefs.jar" />
    </path>

    <path id="build.lib.path.id">
        <fileset dir="build-libs" includes="*.jar" />
    </path>

    <target name="check.subrepositories.exist">
        <available file="${basedir}/subrepo" property="subrepos.exist">
        </available>
    </target>

    <target name="get.all.subrepositories" depends="check.subrepositories.exist" if="subrepos.exist">
        <dirset id="subrepo.dirset" dir="subrepo">
            <include name="*" />
        </dirset>
        <pathconvert pathsep="," property="subrepos" refid="subrepo.dirset">
            <mapper type="flatten" />
        </pathconvert>
        <echo message="All subrepositories=${subrepos}">
        </echo>
    </target>

    <target name="clean.project">
        <exec executable="ant">
            <arg value="-f" />
            <arg value="${basedir}/subrepo/${project.dir}/build.xml" />
            <arg value="clean" />
        </exec>
    </target>

    <target name="clean.subrepositories" depends="get.all.subrepositories" if="subrepos.exist">
        <echo message="Cleaning subrepositories of project: ${basedir}">
        </echo>
        <foreach list="${subrepos}" target="clean.project" param="project.dir">
        </foreach>
    </target>

    <target name="clean" depends="clean.subrepositories" description="Cleans the project including subrepositories">
        <echo message="Cleaning project: ${basedir}">
        </echo>
        <delete dir="bin" failonerror="false" />
        <delete dir="gen" failonerror="false" />
        <delete dir="javadoc" failonerror="false" />
        <delete dir="coverage" failonerror="false" />
        <delete dir="outinstr" failonerror="false" />
        <delete dir="tmpcoverage" failonerror="false" />
    </target>

    <target name="replace.android.log.with.apphance" description="Replace all android logs with apphance. Including subrepositories.">
        <echo message="Replacing android logs with apphance's" />
        <replace casesensitive="true" token="import android.util.Log;" value="import com.apphance.android.Log;" summary="true">
            <fileset dir=".">
                <include name="**/*.java" />
            </fileset>
        </replace>
    </target>

    <target name="revert.project">
        <exec executable="ant">
            <arg value="-f" />
            <arg value="${basedir}/subrepo/${project.dir}/build.xml" />
            <arg value="revert" />
        </exec>
    </target>

    <target name="revert.subrepositories" depends="get.all.subrepositories" if="subrepos.exist">
        <foreach list="${subrepos}" target="revert.project" param="project.dir">
        </foreach>
    </target>

    <target name="revert" depends="revert.subrepositories" description="Reverts all changes done locally including subrepositories">
        <echo message="Reverting all changes in ${basedir}" />
        <exec executable="hg">
            <arg value="revert" />
            <arg value="--all" />
        </exec>
    </target>

    <taskdef name="setup" classname="com.android.ant.SetupTask" classpathref="android.antlibs" />
    <setup import="no" />
    <import file="${sdk.dir}/tools/ant/main_rules.xml" />

    <target name="init">
        <echo message="init" />
        <mkdir dir="bin" />
        <mkdir dir="bin/classes" />
        <mkdir dir="gen" />
        <mkdir dir="outinstr" />
        <mkdir dir="coverage" />
        <mkdir dir="tmpcoverage" />
        <mkdir dir="javadoc" />
        <available file="release/${release.name}/production_build.txt" property="production.build" />
    </target>

    <target name="build.debug.apk" unless="production.build" depends="init">
        <echo message="building debug version" />
        <antcall target="debug" inheritall="true">
        </antcall>
        <echo message="copy ${debug.apk.file} to ${apk.file}" />
        <copy file="${debug.apk.file}" tofile="${apk.file}" />
    </target>

    <target name="remove.apphance.from.manifest">
        <echo message="Removing apphance from AndroidManifest.xml in ${basedir}" />
        <xmltask source="AndroidManifest.xml" dest="AndroidManifest.xml.no_apphance">
            <remove path="/manifest/application/activity[@apphance:only='true']" />
            <remove path="/manifest/uses-permission[@apphance:only='true']" />
        </xmltask>
        <copy file="AndroidManifest.xml.no_apphance" tofile="AndroidManifest.xml" overwrite="true" />
    </target>

    <target name="revert.apphance.manifest">
        <echo message="Reverting AndroidManifest.xml changes in ${basedir}" />
        <exec executable="hg">
            <arg value="revert" />
            <arg value="AndroidManifest.xml" />
        </exec>
    </target>

    <target name="build.release.apk" if="production.build" depends="init">
        <antcall target="remove.apphance.from.manifest">
        </antcall>
        <echo message="building release version" />
        <antcall target="release" inheritall="true">
        </antcall>
        <echo message="copy ${release.apk.file} to ${apk.file}" />
        <copy file="${release.apk.file}" tofile="${apk.file}" />
        <antcall target="revert.apphance.manifest">
        </antcall>
    </target>

    <target name="build" description="Build application" depends="build.release.apk, build.debug.apk">
    </target>

    <!--ANALYSIS-->

    <path id="findbugs.dir.jars">
        <fileset dir="${findbugs.home.dir}/lib">
            <include name="*.jar" />
        </fileset>
    </path>

    <path id="checkstyle.home.id">
        <fileset dir="${checkstyle.home.dir}">
            <include name="*.jar" />
        </fileset>
    </path>

    <path id="pmd.home.id">
        <fileset dir="${pmd.home.dir}/lib">
            <include name="*.jar" />
        </fileset>
    </path>

    <target name="analysis" depends="init,compile" description="-> static code analysis">
        <echo message="analysis" />
        <taskdef resource="checkstyletask.properties" classpathref="checkstyle.home.id" />
        <checkstyle config="analysis/checkstyle.xml" failureProperty="checkstyle.failure" failOnViolation="false" classpathref="checkstyle.home.id">
            <classpath path="${lib-classes-folder}" />
            <classpath path="${out.dir}" />
            <formatter type="xml" tofile="gen/checkstyle_report.xml" />
            <fileset dir="${source.dir}" includes="**/*.java" />
        </checkstyle>
        <!-- get rid of checkstyle "Unable to get class information" error (bug in checkstyle!): -->
        <replaceregexp file="gen/checkstyle_report.xml" flags="g">
            <regexp pattern=".*error.*Unable to get class information.*\/.*" />
            <substitution expression="" />
        </replaceregexp>
        <taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="pmd.home.id" />
        <pmd shortFilenames="false" targetjdk="1.6" rulesetfiles="analysis/pmd.xml">
            <formatter type="xml" toFile="gen/pmd_report.xml" />
            <fileset dir="${source.dir}" includes="**/*.java" />
        </pmd>

        <taskdef name="cpd" classname="net.sourceforge.pmd.cpd.CPDTask" classpathref="pmd.home.id" />
        <cpd minimumTokenCount="100" outputFile="gen/cpd_report.xml" format="xml">
            <fileset dir="${source.dir}" includes="**/*.java" />
        </cpd>

        <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpathref="findbugs.dir.jars" />
        <findbugs home="${findbugs.home.dir}" output="xml" outputFile="gen/findbugs_report.xml" excludefilter="analysis/findbugs_exclude.xml">
            <sourcePath path="${source.dir}" />
            <class location="${out.dir}" />
        </findbugs>
    </target>

    <target name="javadoc" depends="init" description="--> builds javadoc ">
        <echo message="javadoc" />
        <delete dir="javadoc" failonerror="false" />
        <mkdir dir="javadoc" />
        <javadoc destdir="javadoc" author="false" version="false" overview="${javadoc.overview.location}" encoding="utf-8">
            <packageset dir="src" defaultexcludes="yes">
                <include name="**" />
            </packageset>
            <doctitle>
                <![CDATA[<h1>${javadoc.title}</h1>]]></doctitle>
    </javadoc>
</target>

<target name="clean-ota" depends="clean" description="Cleans ota directory">
    <delete dir="ota" />
</target>

<target name="prepare-configuration" description="Prepares configuration based on release.name property (release.name might be development, production, stealth)" if="release.name">
    <copy todir="res/raw/" overwrite="true" verbose="true">
        <fileset dir="release/${release.name}" includes="*">
        </fileset>
    </copy>
</target>

<target name="build.jar" if="jar.file.name" depends="compile">
    <property environment="env" />
    <property file="version.txt" prefix="app" />
    <manifest file="gen/MANIFEST.MF">
        <attribute name="Specification-Title" value="${project.apk.name}" />
        <attribute name="Specification-Vendor" value="${project.apk.name}" />
        <attribute name="Implementation-Title" value="${env.RELEASE_VERSION}" />
        <attribute name="Implementation-Version" value="${app.current.version.code}" />
        <attribute name="Implementation-Vendor" value="${project.apk.name}" />
        <attribute name="Implementation-Vendor-Id" value="${project.apk.name}" />
    </manifest>
    <propertyfile file="gen/manifest.properties">
        <entry key="implementation.title" type="string" value="${env.RELEASE_VERSION}" />
        <entry key="implementation.version" type="int" value="${app.current.version.code}" />
    </propertyfile>

    <!-- Prefix the res/ folder before putting it in the JAR to prevent name clashes with resources
            from applications the JAR will be embedded in -->
    <move file="res" tofile="${jar.file.name}-res" />
    <jar destfile="bin/${jar.file.name}.jar" manifest="gen/MANIFEST.MF" manifestencoding="utf-8">
        <fileset dir="gen">
            <include name="manifest.properties" />
        </fileset>
        <fileset dir="bin/classes">
            <include name="**/*.class" />
            <exclude name="**/test/*.class" />
            <exclude name="R*.class" />
        </fileset>
        <fileset dir=".">
            <include name="${jar.file.name}-res/**" />
            <exclude name="**/*test*.*" />
            <exclude name="${jar.file.name}-res/raw/config.*" />
        </fileset>
    </jar>
    <move file="${jar.file.name}-res" tofile="res" />
</target>

<target name="create-ota-artifacts">
    <mkdir dir="ota" />
    <mkdir dir="ota/${release.name}" />
    <copy todir="ota/${release.name}">
        <fileset dir="bin">
            <include name="*.apk" />
        </fileset>
        <mapper type="glob" from="*.apk" to="${release.name}-*.apk">
        </mapper>
    </copy>
    <copy todir="ota/${release.name}">
        <fileset dir="bin">
            <include name="*.jar" />
        </fileset>
        <mapper type="glob" from="*.jar" to="${release.name}-*.jar">
        </mapper>
    </copy>
</target>

<target name="build.release" description="Builds single release (need to have release.name property defined)" if="release.name">
    <antcall target="clean">
    </antcall>
    <antcall target="prepare-configuration">
    </antcall>
    <antcall target="build">
    </antcall>
    <antcall target="build.jar">
    </antcall>
    <antcall target="create-ota-artifacts">
    </antcall>
</target>

<target name="build-all-releases" description="Builds all releases">
    <dirset id="release.configurations.dirset" dir="release">
        <include name="*" />
    </dirset>
    <pathconvert pathsep="," property="release.configurations" refid="release.configurations.dirset">
        <mapper type="flatten" />
    </pathconvert>
    <foreach list="${release.configurations}" target="build.release" param="release.name">
    </foreach>
</target>

<target name="-post-compile" if="enable.aop">
    <echo message="Weaving aspects in following classes" />
    <iajc destDir="${aop.output}" Xlintwarnings="true" showWeaveInfo="true" target="1.6" source="1.6">
        <argfiles>
            <pathelement location="aspects.lst" />
        </argfiles>
        <inpath>
            <pathelement location="${out.classes.absolute.dir}" />
        </inpath>
        <classpath>
            <pathelement location="${aspectj.home}/lib/aspectjrt.jar" />
            <fileset dir="${jar.libs.dir}" includes="*.jar" />
            <fileset dir="${jar.libs.absolute.dir}" includes="*.jar" />
            <path refid="android.target.classpath" />
        </classpath>
    </iajc>
    <move file="${out.classes.absolute.dir}" todir="bin/classes_not_weaved" />
    <move file="${aop.output}/pl" todir="bin/classes" />
</target>
</project>
